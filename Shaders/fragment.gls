#version 330 core

uniform vec2 viewportDimensions;
uniform vec2 center;
uniform float zoom;
uniform int max_iteration = 150;
out vec4 color;

// Thanks to https://github.com/donqustix/MandelbrotGL
const vec3 colormap[] = vec3[](
    vec3(0.0,  0.0,  0.0),
    vec3(0.26, 0.18, 0.06),
    vec3(0.1, 0.03, 0.1),
    vec3(0.04, 0.0, 0.18),
    vec3(0.02, 0.02, 0.29),
    vec3(0.0, 0.03, 0.39),
    vec3(0.05, 0.17, 0.54),
    vec3(0.09, 0.32, 0.69),
    vec3(0.22, 0.49, 0.82),
    vec3(0.52, 0.71, 0.9),
    vec3(0.82, 0.92, 0.97),
    vec3(0.94, 0.91, 0.75),
    vec3(0.97, 0.79, 0.37),
    vec3(1.0, 0.67, 0.0),
    vec3(0.8, 0.5, 0.0),
    vec3(0.6, 0.34, 0.0),
    vec3(0.41, 0.2, 0.01)
);

void main()
{
	vec2 uv = (gl_FragCoord.xy / viewportDimensions - vec2(0.5)) / zoom + center;

	// iteration is a float because we want smooth coloring
	float iteration = 0;
	
	vec2 Z = vec2(0);

    // this is a little high, but no pain no gain ;)
	// int max_iteration = 1024;

	// here N = 2^8 is chosen as a reasonable bailout radius
	while (Z.x*Z.x + Z.y * Z.y <= (1 << 16) && iteration < max_iteration)
	{
		Z = mat2x2(Z.x, Z.y, -Z.y, Z.x) * Z + uv;

		++ iteration;
	}

	// used to avoid floating point issues with points inside the set.
    if(iteration < max_iteration)
	{
		float log_zn = log(Z.x*Z.x + Z.y*Z.y) / 2.0;

		float nu = log(log_zn / log(2.0)) / log(2.0);

        iteration += 1.0 - nu;

        // This is a happy accident which gives an interesting looking result
        // color = vec4(colormap[(int(floor(iteration)) + 1) % 17], mix(colormap[int(floor(iteration)) % 17], fract(iteration)), 1.0);
        
        color = vec4(mix(colormap[int(floor(iteration)) % 17], colormap[(int(floor(iteration)) + 1) % 17], fract(iteration)), 1.0);
	}
    else
    {
        color = vec4(0);
    }
} 
